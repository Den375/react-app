{"version":3,"sources":["components/common/Paginator/Paginator.module.css","components/Users/User.module.css","redux/users-selectors.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx"],"names":["module","exports","paginator","pageNumber","currentPage","userContainer","class1","class2","getUsers","createSelector","state","usersPage","users","filter","u","getCurrentPage","getPageSize","pageSize","getTotalUsersCount","totalUsersCount","getIsFetching","isFetching","getFollowingInProgress","followingInProgress","getIsAuth","auth","isAuth","getUsersFilter","Paginator","_ref","_ref$currentPage","_ref$onPageChanged","onPageChanged","_ref$portionSize","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","_useState","useState","_useState2","Object","slicedToArray","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","useSelector","useEffect","react_default","a","createElement","className","s","onClick","p","map","cn","defineProperty","User","user","unfollow","follow","react_router_dom","to","id","src","photos","small","userDefPhoto","alt","followed","disabled","some","name","status","usersSearchFormValidate","values","UsersSearchForm","React","memo","props","formik_esm","enableReinitialize","initialValues","term","friend","String","validate","onSubmit","setSubmitting","onFilterChanged","_ref2","isSubmitting","type","placeholder","as","value","Users","dispatch","useDispatch","history","useHistory","parsed","queryString","location","search","substr","actualPage","actualFilter","page","Number","objectSpread","requestUsers","query","pathname","followFriend","userId","unfollowFriend","userID","common_Paginator_Paginator","Users_User","key","UsersPage","pageTitle","Preloader","Users_Users"],"mappings":"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","file":"static/js/1.0b05eb15.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__1EL2A\",\"pageNumber\":\"Paginator_pageNumber__2AyjD\",\"currentPage\":\"Paginator_currentPage__2yj7H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userContainer\":\"User_userContainer__2lnzq\",\"class1\":\"User_class1__3sL6m\",\"class2\":\"User_class2__1bS0d\"};","import {createSelector} from \"reselect\";\r\nimport {AppStateType} from \"./redux-store\";\r\n// зависимость\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n    return users.filter(u => true)  // если не использовать наш селектор, при каждом dispatch будет вызов mapState и в памяти будет создаваться новый массив\r\n})                                  // что ухудшит производительность. filter здесь излишний, для примера\r\n\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n\r\nexport const getIsAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth\r\n}\r\n\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter;\r\n}","import React, {useEffect, useLayoutEffect, useRef, useState} from \"react\";\r\nimport s from \"./Paginator.module.css\";\r\nimport cn from \"classnames\"\r\nimport {useSelector} from \"react-redux\";\r\nimport {getUsersFilter} from \"../../../redux/users-selectors\";\r\n\r\ntype PropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage?: number\r\n    onPageChanged?: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\n const Paginator: React.FC<PropsType> = ({totalUsersCount, pageSize,\r\n                                          currentPage= 1, onPageChanged =  () => {},\r\n                                          portionSize= 10}) => {\r\n\r\n    let pagesCount = Math.ceil(totalUsersCount / pageSize)\r\n\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    const filter = useSelector(getUsersFilter)\r\n\r\n     useEffect(() => {\r\n         setPortionNumber(Math.ceil(currentPage/10))\r\n     }, [filter])\r\n\r\n    return <div className={s.paginator}>\r\n\r\n        { portionNumber > 1 &&\r\n        <button onClick={() => { setPortionNumber(portionNumber - 1), onPageChanged(leftPortionPageNumber - portionSize) }}>PREV</button> }\r\n\r\n        {pages.filter(p => p >= leftPortionPageNumber && p<=rightPortionPageNumber)\r\n                .map( p => {\r\n                return <span className={cn(s.pageNumber, {[s.currentPage]: currentPage === p})}\r\n                             onClick={() => onPageChanged(p)}> {p} </span>\r\n            })}\r\n\r\n        { portionCount > portionNumber &&\r\n        <button onClick={() => { setPortionNumber(portionNumber + 1), onPageChanged(leftPortionPageNumber + portionSize) }}>NEXT</button> }\r\n\r\n         </div>\r\n}\r\n\r\nexport default Paginator\r\n","import s from \"./User.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport userDefPhoto from \"../../assets/images/defaultAvatar.jpg\";\r\nimport React from \"react\";\r\nimport {UserType} from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    isAuth: boolean\r\n    followingInProgress: Array<number>\r\n    unfollow: (userID: number) => void\r\n    follow: (userID: number) => void\r\n}\r\n\r\nconst User: React.FC<PropsType> = ({user, isAuth, followingInProgress, unfollow, follow}) => {\r\n    return <div className={s.userContainer} >\r\n        <div className={s.class1}>\r\n            <div>\r\n                <NavLink to={'/profile/' + user.id} >\r\n                    <img src={user.photos.small || userDefPhoto} alt=\"photo\"/>\r\n                </NavLink>\r\n            </div>\r\n            <div>\r\n                {!isAuth ? null  :\r\n                    user.followed\r\n                        ? <button  disabled={followingInProgress.some(id => id === user.id)}\r\n                                   onClick={() => {unfollow(user.id)}}>Unfollow</button>\r\n                        : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                  onClick={() => {follow(user.id)}}>Follow</button>}\r\n            </div>\r\n        </div>\r\n        <div className={s.class2}>\r\n            <div>{user.name}</div>\r\n            <div>{'user.location.city'}</div>\r\n            <div></div>\r\n            <div></div>\r\n            <div>{user.status}</div>\r\n            <div>{'user.location.country'}</div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default User;","import {Field, Form, Formik} from \"formik\";\r\nimport React from \"react\";\r\nimport {FilterType} from \"../../redux/users-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getUsersFilter} from \"../../redux/users-selectors\";\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    const errors = {}\r\n    return errors;\r\n}\r\n\r\ntype FormType = {\r\n    term: string\r\n    friend: 'true' | 'false' | 'null'\r\n}\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\r\n\r\n    const filter = useSelector(getUsersFilter)\r\n\r\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\r\n        }\r\n\r\n        props.onFilterChanged(filter)\r\n        setSubmitting(false);\r\n\r\n    }\r\n\r\n    return <div>\r\n        <Formik enableReinitialize\r\n            initialValues={{term: filter.term, friend: String(filter.friend) as 'true' | 'false' | 'null'}}\r\n                validate={usersSearchFormValidate} onSubmit={submit}>\r\n            {({isSubmitting}) => (\r\n                <Form>\r\n                    <Field type=\"text\" name=\"term\" placeholder=\"Поиск...\"/>\r\n\r\n                    <Field name=\"friend\" as=\"select\">\r\n                        <option value=\"null\">All</option>\r\n                        <option value=\"true\">Only followed</option>\r\n                        <option value=\"false\">Only unfollowed</option>\r\n                    </Field>\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        Find\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    </div>\r\n})","import React, {useEffect} from \"react\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\nimport {UsersSearchForm} from \"./UsersSearchForm\";\r\nimport {FilterType, follow, requestUsers, unfollow} from \"../../redux/users-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsAuth,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter\r\n} from \"../../redux/users-selectors\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport * as queryString from \"querystring\";\r\n\r\n\r\ntype PropsType = {}\r\ntype QueryParamsType = {\r\n    term?: string\r\n    page?: string\r\n    friend?: string\r\n}\r\n\r\nexport const Users: React.FC<PropsType> = () => {\r\n\r\n    const users = useSelector(getUsers)\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const pageSize = useSelector(getPageSize)\r\n    const filter = useSelector(getUsersFilter)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n    const isAuth = useSelector(getIsAuth)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n\r\n        if (!!parsed.page) actualPage = Number(parsed.page)\r\n\r\n\r\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term }\r\n\r\n        switch(parsed.friend) {\r\n            case \"null\":\r\n                actualFilter = {...actualFilter, friend: null}\r\n                break;\r\n            case \"true\":\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break;\r\n            case \"false\":\r\n                actualFilter = {...actualFilter, friend: false}\r\n                break;\r\n        }\r\n\r\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const query: QueryParamsType = {}\r\n\r\n        if (!!filter.term) query.term = filter.term\r\n        if (filter.friend !== null) query.friend = String(filter.friend)\r\n        if (currentPage !== 1) query.page = String(currentPage)\r\n\r\n        history.push({\r\n            pathname: '/users',\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter, currentPage])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(requestUsers(pageNumber, pageSize, filter))\r\n    }\r\n\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter))\r\n    }\r\n\r\n    const followFriend = (userId: number) => {\r\n        dispatch(follow(userId));\r\n    }\r\n\r\n    const unfollowFriend = (userID: number) => {\r\n        dispatch(unfollow(userID))\r\n    }\r\n\r\n        return <div>\r\n                  <UsersSearchForm onFilterChanged={onFilterChanged}  />\r\n                  <Paginator totalUsersCount={totalUsersCount}\r\n                       pageSize={pageSize}\r\n                       currentPage={currentPage}\r\n                       onPageChanged={onPageChanged}/>\r\n                  <div>\r\n                    {users.map(u => <User user={u} key={u.id} isAuth={isAuth}\r\n                                        followingInProgress={followingInProgress}\r\n                                        unfollow={unfollowFriend} follow={followFriend}/>)}\r\n                  </div>\r\n               </div>\r\n}\r\n\r\n\r\n\r\n","import {Users} from \"./Users\";\r\nimport {useSelector} from \"react-redux\";\r\nimport React, {FC} from \"react\";\r\nimport Preloader from \"../common/preloader/Preloader\";\r\nimport {getIsFetching} from \"../../redux/users-selectors\";\r\n\r\ntype PropsType = {\r\n    pageTitle: string\r\n}\r\n\r\nconst UsersPage: FC<PropsType> = (props) => {\r\n\r\n    const isFetching = useSelector(getIsFetching)\r\n\r\n    return <div>\r\n        <h3>{props.pageTitle}</h3>\r\n        {isFetching ? <Preloader/> : null}\r\n        <Users/>\r\n    </div>\r\n}\r\n\r\nexport default UsersPage\r\n\r\n/*const AuthRedirect = withAuthRedirect(UsersContainer)\r\n\r\nexport default connect(mapStateToProps, {\r\n    getUsers,\r\n    setCurrentPage,\r\n    follow,\r\n    unfollow\r\n})(AuthRedirect)*/\r\n\r\n/*const mapStateToProps = (state) => {\r\n        return {\r\n            users: state.usersPage.users,\r\n            currentPage: state.usersPage.currentPage,\r\n            pageSize: state.usersPage.pageSize,\r\n            totalUsersCount: state.usersPage.totalUsersCount,\r\n            isFetching: state.usersPage.isFetching,\r\n            isFollowingProgress: state.usersPage.isFollowingProgress,\r\n        }\r\n    }*/\r\n\r\n/*const mapDispatchToProps = (dispatch) => {\r\n        return {\r\n            getUsers: (currentPage, pageSize) => {\r\n                dispatch(gerUsersThunkCreator(currentPage, pageSize))\r\n            },\r\n            follow: (userID) => {\r\n                dispatch(followAC(userID))\r\n            },\r\n            unFollow: (userID) => {\r\n                dispatch(unFollowAC(userID))\r\n            },\r\n            setUsers: (users) => {\r\n                dispatch(setUsersAC(users))\r\n            },\r\n            setCurrentPage: (pageNumber) => {\r\n                dispatch(setCurrentPageAC(pageNumber))\r\n            },\r\n            setTotalUsersCount: (totalUsersCount) => {\r\n                dispatch(setTotalUsersCountAC(totalUsersCount))\r\n            },\r\n            toggleIsFetching: (isFetching) => {\r\n                dispatch(toggleIsFetchingAC(isFetching))\r\n            }\r\n        }\r\n    }*/\r\n"],"sourceRoot":""}